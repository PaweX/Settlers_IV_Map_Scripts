gCenter_X = 24
gCenter_Y = 870
gRadius = 20


circles={
	exit={
		center={x=24,y=870},
		radius=20,
		effect=Effects.MAGIC_PILE03,
		sound=Sounds.NO_SOUND,
		density=1,
		delay=0,
		effectsPerTick=20,
		split=4,
		coordinates={x={},y={}},
		effectsAmount=1,
		_i=1,
		_j=1
	}
}

function initVar()
	Vars.Save1=0			--flag, turns 1 when player reaches Warships in Gibraltar
	Vars.Save2=0			--flag, turns 1 when player fetches units on canarian islands
end

function victoryConditionCheck()
  mu,l1,l2,l3,sl,fc=Vehicles.GetFerryCargoInArea(1,circles.exit.center.x,circles.exit.center.y,circles.exit.radius)
  Game.DefaultPlayerLostCheck(1)
	if Settlers.Amount(1,Settlers.PRIEST)<2 or Game.HasPlayerLost(1)==1 then
		Game.ShowText("MD2_MAYAN_SCRIPT_FOUR_03")
		Game.PlayerLost(1)
		Game.DefaultGameEndCheck()
	else
		if	Vehicles.AmountInArea(1,Vehicles.FERRY,gCenter_X,gCenter_Y,gRadius)>0
			  and mu>=2 and l3>=10 and sl>=3 then

					Game.EnemyPlayersLost(1)
					Game.DefaultGameEndCheck()
		end
	end
end

function warShipCheck()
	if Vars.Save1==1 then
		request_event(ferryCheck,Events.TICK)
		unrequest_event(warShipCheck,Events.FIVE_TICKS)
	else
		if Vehicles.AmountInArea(1,Vehicles.FERRY,342,432,25)>0 and
		   (Vehicles.AmountInArea(3,Vehicles.WARSHIP,342,432,25)>0 or
		   	Vehicles.AmountInArea(4,Vehicles.WARSHIP,342,432,25)>0 or
		   	Vehicles.AmountInArea(5,Vehicles.WARSHIP,342,432,25)>0) then

					Game.ShowText("MD2_MAYAN_SCRIPT_FOUR_01",342,432)
					Vehicles.AddVehicle(12,12,2,Vehicles.FERRY,1,0,1)
					AI.NewSquad(2,AI.CMD_MOVE_AND_STAY,96,156)
					Vars.Save1=1
		end
	end
end

function ferryCheck()
	if Vars.Save1==2 then
		unrequest_event(ferryCheck,Events.TICK)
	else
		if Vehicles.AmountInArea(2,Vehicles.FERRY,96,156,0)==1 then
			Vehicles.KillVehicles(2,Vehicles.FERRY,96,156,0,0)
			Vehicles.AddVehicle(96,156,1,Vehicles.FERRY,2,0,1)
			Game.ShowText("MD2_MAYAN_SCRIPT_FOUR_02",96,156)
			Vars.Save1=2
		end
	end
end

function sqrt(_number)
	lower=0
	upper=_number
	while upper-lower>0.001 do
		result=(upper+lower)/2
		if (result*result)<_number then
			lower=result
		else
			upper=result
		end
	end
	return result
end

function sort(_table)
	i=1
	sectorAmount=getn(_table.x)
	sa=sectorAmount
	while i<=(sectorAmount) do
		j=1
		while j<sa-1 do
			if _table.x[j]>_table.x[sa] then
				temp=_table.x[sa]
				_table.x[sa]=_table.x[j]
				_table.x[j]=temp
				temp=_table.y[sa]
				_table.y[sa]=_table.y[j]
				_table.y[j]=temp
			end
			j=j+1
		end
		sa=sa-1
		i=i+1
	end
	i=1
	while i<=getn(_table.x) do
		if _table.x[i]==_table.x[(i+1)] or _table.y[i]==_table.y[(i+1)] then
			tremove(_table.x,i)
			tremove(_table.y,i)
		else
			i=i+1
		end
	end
	sectorAmount=getn(_table.x)
end

function circles.calculateFirstSector(_circle)
	sector={x={},y={}}
	sectorAmount=1
	_y=_circle.radius-1
	while _y>=0 do
		_z=(_circle.radius*_circle.radius)-(_y*_y)
		if _z==0 then
			dx=0
		else
			dx=sqrt(_z)
		end
		sector.x[sectorAmount]=_circle.center.x+dx
		sector.y[sectorAmount]=_circle.center.y-_y
		_y=_y-_circle.density
		sectorAmount=sectorAmount+1
	end
	_x=_circle.radius-1
	while _x>=0 do
		_z=(_circle.radius*_circle.radius)-(_x*_x)
		if _z==0 then
			dy=0
		else
			dy=sqrt(_z)
		end
		sector.x[sectorAmount]=_circle.center.x+_x
		sector.y[sectorAmount]=_circle.center.y-dy
		_x=_x-_circle.density
		sectorAmount=sectorAmount+1
	end
	sort(sector)
end

function circles.calculateSecondSector(_circle)
	sector={x={},y={}}
	sectorAmount=1
	_y=_circle.radius-1
	while _y>=0 do
		_z=(_circle.radius*_circle.radius)-(_y*_y)
		if _z==0 then
			dx=0
		else
			dx=sqrt(_z)
		end
		sector.x[sectorAmount]=_circle.center.x+dx
		sector.y[sectorAmount]=_circle.center.y+_y
		_y=_y-_circle.density
		sectorAmount=sectorAmount+1
	end
	_x=_circle.radius-1
	while _x>=0 do
		_z=(_circle.radius*_circle.radius)-(_x*_x)
		if _z==0 then
			dy=0
		else
			dy=sqrt(_z)
		end
		sector.x[sectorAmount]=_circle.center.x+_x
		sector.y[sectorAmount]=_circle.center.y+dy
		_x=_x-_circle.density
		sectorAmount=sectorAmount+1
	end
	sort(sector)
end

function circles.calculateThirdSector(_circle)
	sector={x={},y={}}
	sectorAmount=1
	_y=_circle.radius-1
	while _y>=0 do
		_z=(_circle.radius*_circle.radius)-(_y*_y)
		if _z==0 then
			dx=0
		else
			dx=sqrt(_z)
		end
		sector.x[sectorAmount]=_circle.center.x-dx
		sector.y[sectorAmount]=_circle.center.y+_y
		_y=_y-_circle.density
		sectorAmount=sectorAmount+1
	end
	_x=_circle.radius-1
	while _x>=0 do
		_z=(_circle.radius*_circle.radius)-(_x*_x)
		if _z==0 then
			dy=0
		else
			dy=sqrt(_z)
		end
		sector.x[sectorAmount]=_circle.center.x-_x
		sector.y[sectorAmount]=_circle.center.y+dy
		_x=_x-_circle.density
		sectorAmount=sectorAmount+1
	end
	sort(sector)
end

function circles.calculateFourthSector(_circle)
	sector={x={},y={}}
	sectorAmount=1
	_y=_circle.radius-1
	while _y>=0 do
		_z=(_circle.radius*_circle.radius)-(_y*_y)
		if _z==0 then
			dx=0
		else
			dx=sqrt(_z)
		end
		sector.x[sectorAmount]=_circle.center.x-dx
		sector.y[sectorAmount]=_circle.center.y-_y
		_y=_y-_circle.density
		sectorAmount=sectorAmount+1
	end
	_x=_circle.radius-1
	while _x>=0 do
		_z=(_circle.radius*_circle.radius)-(_x*_x)
		if _z==0 then
			dy=0
		else
			dy=sqrt(_z)
		end
		sector.x[sectorAmount]=_circle.center.x-_x
		sector.y[sectorAmount]=_circle.center.y-dy
		_x=_x-_circle.density
		sectorAmount=sectorAmount+1
	end
	sort(sector)
end

function circles.calculate(_circle)
	circles.calculateFirstSector(_circle)
	i=1
	while i<=sectorAmount do
		_circle.coordinates.x[_circle.effectsAmount]=sector.x[i]
		_circle.coordinates.y[_circle.effectsAmount]=sector.y[i]
		_circle.effectsAmount=_circle.effectsAmount+1
		i=i+1
	end
	circles.calculateSecondSector(_circle)
	i=sectorAmount
	while i>0 do
		_circle.coordinates.x[_circle.effectsAmount]=sector.x[i]
		_circle.coordinates.y[_circle.effectsAmount]=sector.y[i]
		_circle.effectsAmount=_circle.effectsAmount+1
		i=i-1
	end
	circles.calculateThirdSector(_circle)
	i=sectorAmount
	while i>0 do
		_circle.coordinates.x[_circle.effectsAmount]=sector.x[i]
		_circle.coordinates.y[_circle.effectsAmount]=sector.y[i]
		_circle.effectsAmount=_circle.effectsAmount+1
		i=i-1
	end
	circles.calculateFourthSector(_circle)
	i=1
	while i<=sectorAmount do
		_circle.coordinates.x[_circle.effectsAmount]=sector.x[i]
		_circle.coordinates.y[_circle.effectsAmount]=sector.y[i]
		_circle.effectsAmount=_circle.effectsAmount+1
		i=i+1
	end
	i=1
	while i<_circle.effectsAmount do
		_y=_circle.coordinates.y[i]
		_circle.coordinates.x[i]=_circle.coordinates.x[i]+(_y/2)-(_circle.center.y/2)
		i=i+1
	end
	effectsAmount=getn(_circle.coordinates.x)
end

function circles.draw(_circle)
	drawnEffects=0
	while drawnEffects<_circle.effectsPerTick do
		if _circle._j<_circle.split then
			if _circle._i<=_circle.effectsAmount then
				_x=_circle.coordinates.x[_circle._i]
				_y=_circle.coordinates.y[_circle._i]
				Effects.AddEffect(_circle.effect, _circle.sound, _x, _y, _circle.delay)
				_circle._i=_circle._i+_circle.split
			else
				_circle._j=_circle._j+1
				_circle._i=_circle._j
			end
		else
			_circle._j=0
		end
		drawnEffects=drawnEffects+1
	end
end

function effectCircle()
	circles.draw(circles.exit)
end

function calculateCircles()
	circles.calculate(circles.exit)
end

function new_game()
	request_event(initVar,Events.FIRST_TICK_OF_NEW_GAME)
	request_event(calculateCircles,Events.FIRST_TICK_OF_NEW_OR_LOADED_GAME)
	request_event(victoryConditionCheck,Events.VICTORY_CONDITION_CHECK)
	request_event(warShipCheck,Events.FIVE_TICKS)
	request_event(effectCircle,Events.TICK)
	Vehicles.AddVehicle(342,432,3,Vehicles.WARSHIP,0,100,0)
	Vehicles.AddVehicle(301,440,3,Vehicles.WARSHIP,3,100,0)
	Vehicles.AddVehicle(282,430,4,Vehicles.WARSHIP,3,100,0)
	Vehicles.AddVehicle(278,438,4,Vehicles.WARSHIP,3,100,0)
	Vehicles.AddVehicle(327,427,5,Vehicles.WARSHIP,0,100,0)
	Vehicles.AddVehicle(319,435,5,Vehicles.WARSHIP,0,100,0)
	Vehicles.AddVehicle(589,363,1,Vehicles.FERRY,0,0,0)
	Magic.IncreaseMana(1,100)
	Magic.IncreaseMana(2,1000)
	
	AI.SetPlayerVar(2, "AttackMode", 2, 2, 2) 
	AI.SetPlayerVar(2, "AttackDelay", 75, 45, 30) 
	AI.SetPlayerVar(2, "SoldierLimitAbsolute", 250,500,0)
	AI.SetPlayerVar(2, "SoldierLimitRelative", 200,250,0)	
	AI.SetPlayerVar(3, "AttackMode", 2, 2, 2) 
	AI.SetPlayerVar(3, "AttackDelay", 75, 45, 30) 
	AI.SetPlayerVar(3, "SoldierLimitAbsolute", 250,500,0)
	AI.SetPlayerVar(3, "SoldierLimitRelative", 200,250,0)	
	AI.SetPlayerVar(4, "AttackMode", 2, 2, 2) 
	AI.SetPlayerVar(4, "AttackDelay", 75, 45, 30) 
	AI.SetPlayerVar(4, "SoldierLimitAbsolute", 250,500,0)
	AI.SetPlayerVar(4, "SoldierLimitRelative", 200,250,0)	
	AI.SetPlayerVar(5, "AttackMode", 2, 2, 2) 
	AI.SetPlayerVar(5, "AttackDelay", 75, 45, 30) 
	AI.SetPlayerVar(5, "SoldierLimitAbsolute", 250,500,0)
	AI.SetPlayerVar(5, "SoldierLimitRelative", 200,250,0)	
	AI.SetPlayerVar(6, "AttackMode", 2, 2, 2) 
	AI.SetPlayerVar(6, "AttackDelay", 75, 45, 30) 
	AI.SetPlayerVar(6, "SoldierLimitAbsolute", 250,500,0)
	AI.SetPlayerVar(6, "SoldierLimitRelative", 200,250,0)	
	
end

function register_functions()
	reg_func(initVar)
	reg_func(victoryConditionCheck)
	reg_func(warShipCheck)
	reg_func(ferryCheck)
	reg_func(effectCircle)
	reg_func(calculateCircles)
end

--for testing only
function destroyShips()
	Vehicles.KillVehicles(3,Vehicles.WARSHIP,342,432,50)
	Vehicles.KillVehicles(4,Vehicles.WARSHIP,282,430,50)
	Vehicles.KillVehicles(5,Vehicles.WARSHIP,327,427,50)
end